/**
 * @fileoverview Firestore Security Rules for PensionVision.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model, ensuring that only the authenticated user can access and modify their own data.
 *
 * Data Structure: All user-specific data, including user profiles and pension projections, are nested under the /users/{userId} path.  Pension projections are stored in a subcollection `/users/{userId}/emeryturaPrognoses/{emeryturaPrognosisId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All writes are restricted to the owner of the data.
 * - The rules validate that the userId in the path matches the authenticated user's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection. Only the user themselves can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces user ownership for all operations on user profiles.  Also prevents listing of all users.
     */
    match /users/{userId} {
      // Users can only read or write their own profile documents.
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/emeryturaPrognoses collection. Only the user themselves can read or write their own pension projections.
     * @path /users/{userId}/emeryturaPrognoses/{emeryturaPrognosisId}
     * @allow (create) User with ID 'user123' can create a pension projection under their profile.
     * @allow (get) User with ID 'user123' can read a pension projection under their profile.
     * @allow (update) User with ID 'user123' can update a pension projection under their profile.
     * @allow (delete) User with ID 'user123' can delete a pension projection under their profile.
     * @deny (create) User with ID 'user456' cannot create a pension projection under user 'user123's profile.
     * @deny (get) User with ID 'user456' cannot read a pension projection under user 'user123's profile.
     * @deny (update) User with ID 'user456' cannot update a pension projection under user 'user123's profile.
     * @deny (delete) User with ID 'user456' cannot delete a pension projection under user 'user123's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/emeryturaPrognoses/{emeryturaPrognosisId} {
      // Only the owner can read and write their own pension projections.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}